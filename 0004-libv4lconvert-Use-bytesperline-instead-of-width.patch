From 31d2b0b0e40c6c92984d5077bb1a324729c71e7d Mon Sep 17 00:00:00 2001
From: Robert Abel <abel@uni-bielefeld.de>
Date: Sat, 25 Feb 2012 18:12:38 +0100
Subject: [PATCH 4/5] libv4lconvert: Use bytesperline instead of width

Basically, I found that libv4l and its conversion functions usually
choose to ignore v4l2_pix_format.bytesperline, which seems to work out
most of the time.

I'm currently working with the mt9v032 camera on a Gumstix Overo board.
The mt9v032's driver pads output lines to 768 pixels, giving 0x900 bytes
per line. All code in bayer.c (the camera uses raw bayer pattern) is
written to assume bytesperline = width and thus everything goes horribly
wrong.

Anyway, the patch for bayer => rgb as well as bayer => yuv is attached.
Basically, every time where width was assumed to be the offset to the
neighboring pixel below, now step is used.

Signed-off-by: Gregor Jasny <gjasny@googlemail.com>
---
 lib/libv4lconvert/bayer.c              |  219 ++++++++++++++++----------------
 lib/libv4lconvert/libv4lconvert-priv.h |    6 +-
 lib/libv4lconvert/libv4lconvert.c      |    9 +-
 3 files changed, 119 insertions(+), 115 deletions(-)

diff --git a/lib/libv4lconvert/bayer.c b/lib/libv4lconvert/bayer.c
index 924b8d4..d22db68 100644
--- a/lib/libv4lconvert/bayer.c
+++ b/lib/libv4lconvert/bayer.c
@@ -44,7 +44,7 @@
 /* inspired by OpenCV's Bayer decoding */
 static void v4lconvert_border_bayer_line_to_bgr24(
 		const unsigned char *bayer, const unsigned char *adjacent_bayer,
-		unsigned char *bgr, int width, int start_with_green, int blue_line)
+		unsigned char *bgr, int width, const int start_with_green, const int blue_line)
 {
 	int t0, t1;
 
@@ -164,11 +164,11 @@ static void v4lconvert_border_bayer_line_to_bgr24(
 
 /* From libdc1394, which on turn was based on OpenCV's Bayer decoding */
 static void bayer_to_rgbbgr24(const unsigned char *bayer,
-		unsigned char *bgr, int width, int height, unsigned int pixfmt,
+		unsigned char *bgr, int width, int height, const unsigned int stride, unsigned int pixfmt,
 		int start_with_green, int blue_line)
 {
 	/* render the first line */
-	v4lconvert_border_bayer_line_to_bgr24(bayer, bayer + width, bgr, width,
+	v4lconvert_border_bayer_line_to_bgr24(bayer, bayer + stride, bgr, width,
 			start_with_green, blue_line);
 	bgr += width * 3;
 
@@ -179,139 +179,141 @@ static void bayer_to_rgbbgr24(const unsigned char *bayer,
 		const unsigned char *bayer_end = bayer + (width - 2);
 
 		if (start_with_green) {
-			/* OpenCV has a bug in the next line, which was
-			   t0 = (bayer[0] + bayer[width * 2] + 1) >> 1; */
-			t0 = (bayer[1] + bayer[width * 2 + 1] + 1) >> 1;
+
+			t0 = (bayer[1] + bayer[stride * 2 + 1] + 1) >> 1;
 			/* Write first pixel */
-			t1 = (bayer[0] + bayer[width * 2] + bayer[width + 1] + 1) / 3;
+			t1 = (bayer[0] + bayer[stride * 2] + bayer[stride + 1] + 1) / 3;
 			if (blue_line) {
 				*bgr++ = t0;
 				*bgr++ = t1;
-				*bgr++ = bayer[width];
+				*bgr++ = bayer[stride];
 			} else {
-				*bgr++ = bayer[width];
+				*bgr++ = bayer[stride];
 				*bgr++ = t1;
 				*bgr++ = t0;
 			}
 
 			/* Write second pixel */
-			t1 = (bayer[width] + bayer[width + 2] + 1) >> 1;
+			t1 = (bayer[stride] + bayer[stride + 2] + 1) >> 1;
 			if (blue_line) {
 				*bgr++ = t0;
-				*bgr++ = bayer[width + 1];
+				*bgr++ = bayer[stride + 1];
 				*bgr++ = t1;
 			} else {
 				*bgr++ = t1;
-				*bgr++ = bayer[width + 1];
+				*bgr++ = bayer[stride + 1];
 				*bgr++ = t0;
 			}
 			bayer++;
 		} else {
 			/* Write first pixel */
-			t0 = (bayer[0] + bayer[width * 2] + 1) >> 1;
+			t0 = (bayer[0] + bayer[stride * 2] + 1) >> 1;
 			if (blue_line) {
 				*bgr++ = t0;
-				*bgr++ = bayer[width];
-				*bgr++ = bayer[width + 1];
+				*bgr++ = bayer[stride];
+				*bgr++ = bayer[stride + 1];
 			} else {
-				*bgr++ = bayer[width + 1];
-				*bgr++ = bayer[width];
+				*bgr++ = bayer[stride + 1];
+				*bgr++ = bayer[stride];
 				*bgr++ = t0;
 			}
 		}
 
 		if (blue_line) {
 			for (; bayer <= bayer_end - 2; bayer += 2) {
-				t0 = (bayer[0] + bayer[2] + bayer[width * 2] +
-					bayer[width * 2 + 2] + 2) >> 2;
-				t1 = (bayer[1] + bayer[width] + bayer[width + 2] +
-					bayer[width * 2 + 1] + 2) >> 2;
+				t0 = (bayer[0] + bayer[2] + bayer[stride * 2] +
+					bayer[stride * 2 + 2] + 2) >> 2;
+				t1 = (bayer[1] + bayer[stride] + bayer[stride + 2] +
+					bayer[stride * 2 + 1] + 2) >> 2;
 				*bgr++ = t0;
 				*bgr++ = t1;
-				*bgr++ = bayer[width + 1];
+				*bgr++ = bayer[stride + 1];
 
-				t0 = (bayer[2] + bayer[width * 2 + 2] + 1) >> 1;
-				t1 = (bayer[width + 1] + bayer[width + 3] + 1) >> 1;
+				t0 = (bayer[2] + bayer[stride * 2 + 2] + 1) >> 1;
+				t1 = (bayer[stride + 1] + bayer[stride + 3] + 1) >> 1;
 				*bgr++ = t0;
-				*bgr++ = bayer[width + 2];
+				*bgr++ = bayer[stride + 2];
 				*bgr++ = t1;
 			}
 		} else {
 			for (; bayer <= bayer_end - 2; bayer += 2) {
-				t0 = (bayer[0] + bayer[2] + bayer[width * 2] +
-					bayer[width * 2 + 2] + 2) >> 2;
-				t1 = (bayer[1] + bayer[width] + bayer[width + 2] +
-					bayer[width * 2 + 1] + 2) >> 2;
-				*bgr++ = bayer[width + 1];
+				t0 = (bayer[0] + bayer[2] + bayer[stride * 2] +
+					bayer[stride * 2 + 2] + 2) >> 2;
+				t1 = (bayer[1] + bayer[stride] + bayer[stride + 2] +
+					bayer[stride * 2 + 1] + 2) >> 2;
+				*bgr++ = bayer[stride + 1];
 				*bgr++ = t1;
 				*bgr++ = t0;
 
-				t0 = (bayer[2] + bayer[width * 2 + 2] + 1) >> 1;
-				t1 = (bayer[width + 1] + bayer[width + 3] + 1) >> 1;
+				t0 = (bayer[2] + bayer[stride * 2 + 2] + 1) >> 1;
+				t1 = (bayer[stride + 1] + bayer[stride + 3] + 1) >> 1;
 				*bgr++ = t1;
-				*bgr++ = bayer[width + 2];
+				*bgr++ = bayer[stride + 2];
 				*bgr++ = t0;
 			}
 		}
 
 		if (bayer < bayer_end) {
 			/* write second to last pixel */
-			t0 = (bayer[0] + bayer[2] + bayer[width * 2] +
-				bayer[width * 2 + 2] + 2) >> 2;
-			t1 = (bayer[1] + bayer[width] + bayer[width + 2] +
-				bayer[width * 2 + 1] + 2) >> 2;
+			t0 = (bayer[0] + bayer[2] + bayer[stride * 2] +
+				bayer[stride * 2 + 2] + 2) >> 2;
+			t1 = (bayer[1] + bayer[stride] + bayer[stride + 2] +
+				bayer[stride * 2 + 1] + 2) >> 2;
 			if (blue_line) {
 				*bgr++ = t0;
 				*bgr++ = t1;
-				*bgr++ = bayer[width + 1];
+				*bgr++ = bayer[stride + 1];
 			} else {
-				*bgr++ = bayer[width + 1];
+				*bgr++ = bayer[stride + 1];
 				*bgr++ = t1;
 				*bgr++ = t0;
 			}
 			/* write last pixel */
-			t0 = (bayer[2] + bayer[width * 2 + 2] + 1) >> 1;
+			t0 = (bayer[2] + bayer[stride * 2 + 2] + 1) >> 1;
 			if (blue_line) {
 				*bgr++ = t0;
-				*bgr++ = bayer[width + 2];
-				*bgr++ = bayer[width + 1];
+				*bgr++ = bayer[stride + 2];
+				*bgr++ = bayer[stride + 1];
 			} else {
-				*bgr++ = bayer[width + 1];
-				*bgr++ = bayer[width + 2];
+				*bgr++ = bayer[stride + 1];
+				*bgr++ = bayer[stride + 2];
 				*bgr++ = t0;
 			}
+
 			bayer++;
+
 		} else {
 			/* write last pixel */
-			t0 = (bayer[0] + bayer[width * 2] + 1) >> 1;
-			t1 = (bayer[1] + bayer[width * 2 + 1] + bayer[width] + 1) / 3;
+			t0 = (bayer[0] + bayer[stride * 2] + 1) >> 1;
+			t1 = (bayer[1] + bayer[stride * 2 + 1] + bayer[stride] + 1) / 3;
 			if (blue_line) {
 				*bgr++ = t0;
 				*bgr++ = t1;
-				*bgr++ = bayer[width + 1];
+				*bgr++ = bayer[stride + 1];
 			} else {
-				*bgr++ = bayer[width + 1];
+				*bgr++ = bayer[stride + 1];
 				*bgr++ = t1;
 				*bgr++ = t0;
 			}
+
 		}
 
-		/* skip 2 border pixels */
-		bayer += 2;
+		/* skip 2 border pixels and padding */
+		bayer += (stride - width) + 2;
 
 		blue_line = !blue_line;
 		start_with_green = !start_with_green;
 	}
 
 	/* render the last line */
-	v4lconvert_border_bayer_line_to_bgr24(bayer + width, bayer, bgr, width,
+	v4lconvert_border_bayer_line_to_bgr24(bayer + stride, bayer, bgr, width,
 			!start_with_green, !blue_line);
 }
 
 void v4lconvert_bayer_to_rgb24(const unsigned char *bayer,
-		unsigned char *bgr, int width, int height, unsigned int pixfmt)
+		unsigned char *bgr, int width, int height, const unsigned int stride, unsigned int pixfmt)
 {
-	bayer_to_rgbbgr24(bayer, bgr, width, height, pixfmt,
+	bayer_to_rgbbgr24(bayer, bgr, width, height, stride, pixfmt,
 			pixfmt == V4L2_PIX_FMT_SGBRG8		/* start with green */
 			|| pixfmt == V4L2_PIX_FMT_SGRBG8,
 			pixfmt != V4L2_PIX_FMT_SBGGR8		/* blue line */
@@ -319,9 +321,9 @@ void v4lconvert_bayer_to_rgb24(const unsigned char *bayer,
 }
 
 void v4lconvert_bayer_to_bgr24(const unsigned char *bayer,
-		unsigned char *bgr, int width, int height, unsigned int pixfmt)
+		unsigned char *bgr, int width, int height, const unsigned int stride, unsigned int pixfmt)
 {
-	bayer_to_rgbbgr24(bayer, bgr, width, height, pixfmt,
+	bayer_to_rgbbgr24(bayer, bgr, width, height, stride, pixfmt,
 			pixfmt == V4L2_PIX_FMT_SGBRG8		/* start with green */
 			|| pixfmt == V4L2_PIX_FMT_SGRBG8,
 			pixfmt == V4L2_PIX_FMT_SBGGR8		/* blue line */
@@ -428,7 +430,7 @@ static void v4lconvert_border_bayer_line_to_y(
 }
 
 void v4lconvert_bayer_to_yuv420(const unsigned char *bayer, unsigned char *yuv,
-		int width, int height, unsigned int src_pixfmt, int yvu)
+		int width, int height, const unsigned int stride, unsigned int src_pixfmt, int yvu)
 {
 	int blue_line = 0, start_with_green = 0, x, y;
 	unsigned char *ydst = yuv;
@@ -451,12 +453,12 @@ void v4lconvert_bayer_to_yuv420(const unsigned char *bayer, unsigned char *yuv,
 
 				b  = bayer[x];
 				g  = bayer[x + 1];
-				g += bayer[x + width];
-				r  = bayer[x + width + 1];
+				g += bayer[x + stride];
+				r  = bayer[x + stride + 1];
 				*udst++ = (-4878 * r - 4789 * g + 14456 * b + 4210688) >> 15;
 				*vdst++ = (14456 * r - 6052 * g -  2351 * b + 4210688) >> 15;
 			}
-			bayer += 2 * width;
+			bayer += 2 * stride;
 		}
 		blue_line = 1;
 		break;
@@ -468,12 +470,12 @@ void v4lconvert_bayer_to_yuv420(const unsigned char *bayer, unsigned char *yuv,
 
 				r  = bayer[x];
 				g  = bayer[x + 1];
-				g += bayer[x + width];
-				b  = bayer[x + width + 1];
+				g += bayer[x + stride];
+				b  = bayer[x + stride + 1];
 				*udst++ = (-4878 * r - 4789 * g + 14456 * b + 4210688) >> 15;
 				*vdst++ = (14456 * r - 6052 * g -  2351 * b + 4210688) >> 15;
 			}
-			bayer += 2 * width;
+			bayer += 2 * stride;
 		}
 		break;
 
@@ -484,12 +486,12 @@ void v4lconvert_bayer_to_yuv420(const unsigned char *bayer, unsigned char *yuv,
 
 				g  = bayer[x];
 				b  = bayer[x + 1];
-				r  = bayer[x + width];
-				g += bayer[x + width + 1];
+				r  = bayer[x + stride];
+				g += bayer[x + stride + 1];
 				*udst++ = (-4878 * r - 4789 * g + 14456 * b + 4210688) >> 15;
 				*vdst++ = (14456 * r - 6052 * g -  2351 * b + 4210688) >> 15;
 			}
-			bayer += 2 * width;
+			bayer += 2 * stride;
 		}
 		blue_line = 1;
 		start_with_green = 1;
@@ -502,21 +504,22 @@ void v4lconvert_bayer_to_yuv420(const unsigned char *bayer, unsigned char *yuv,
 
 				g  = bayer[x];
 				r  = bayer[x + 1];
-				b  = bayer[x + width];
-				g += bayer[x + width + 1];
+				b  = bayer[x + stride];
+				g += bayer[x + stride + 1];
 				*udst++ = (-4878 * r - 4789 * g + 14456 * b + 4210688) >> 15;
 				*vdst++ = (14456 * r - 6052 * g -  2351 * b + 4210688) >> 15;
 			}
-			bayer += 2 * width;
+			bayer += 2 * stride;
 		}
 		start_with_green = 1;
 		break;
 	}
 
-	bayer -= width * height;
+	/* Point bayer back to start of frame */
+	bayer -= stride * height;
 
 	/* render the first line */
-	v4lconvert_border_bayer_line_to_y(bayer, bayer + width, ydst, width,
+	v4lconvert_border_bayer_line_to_y(bayer, bayer + stride, ydst, width,
 			start_with_green, blue_line);
 	ydst += width;
 
@@ -527,104 +530,104 @@ void v4lconvert_bayer_to_yuv420(const unsigned char *bayer, unsigned char *yuv,
 		const unsigned char *bayer_end = bayer + (width - 2);
 
 		if (start_with_green) {
-			t0 = bayer[1] + bayer[width * 2 + 1];
+			t0 = bayer[1] + bayer[stride * 2 + 1];
 			/* Write first pixel */
-			t1 = bayer[0] + bayer[width * 2] + bayer[width + 1];
+			t1 = bayer[0] + bayer[stride * 2] + bayer[stride + 1];
 			if (blue_line)
-				*ydst++ = (8453 * bayer[width] + 5516 * t1 +
+				*ydst++ = (8453 * bayer[stride] + 5516 * t1 +
 						1661 * t0 + 524288) >> 15;
 			else
 				*ydst++ = (4226 * t0 + 5516 * t1 +
-						3223 * bayer[width] + 524288) >> 15;
+						3223 * bayer[stride] + 524288) >> 15;
 
 			/* Write second pixel */
-			t1 = bayer[width] + bayer[width + 2];
+			t1 = bayer[stride] + bayer[stride + 2];
 			if (blue_line)
-				*ydst++ = (4226 * t1 + 16594 * bayer[width + 1] +
+				*ydst++ = (4226 * t1 + 16594 * bayer[stride + 1] +
 						1611 * t0 + 524288) >> 15;
 			else
-				*ydst++ = (4226 * t0 + 16594 * bayer[width + 1] +
+				*ydst++ = (4226 * t0 + 16594 * bayer[stride + 1] +
 						1611 * t1 + 524288) >> 15;
 			bayer++;
 		} else {
 			/* Write first pixel */
-			t0 = bayer[0] + bayer[width * 2];
+			t0 = bayer[0] + bayer[stride * 2];
 			if (blue_line) {
-				*ydst++ = (8453 * bayer[width + 1] + 16594 * bayer[width] +
+				*ydst++ = (8453 * bayer[stride + 1] + 16594 * bayer[stride] +
 						1661 * t0 + 524288) >> 15;
 			} else {
-				*ydst++ = (4226 * t0 + 16594 * bayer[width] +
-						3223 * bayer[width + 1] + 524288) >> 15;
+				*ydst++ = (4226 * t0 + 16594 * bayer[stride] +
+						3223 * bayer[stride + 1] + 524288) >> 15;
 			}
 		}
 
 		if (blue_line) {
 			for (; bayer <= bayer_end - 2; bayer += 2) {
-				t0 = bayer[0] + bayer[2] + bayer[width * 2] + bayer[width * 2 + 2];
-				t1 = bayer[1] + bayer[width] + bayer[width + 2] + bayer[width * 2 + 1];
-				*ydst++ = (8453 * bayer[width + 1] + 4148 * t1 +
+				t0 = bayer[0] + bayer[2] + bayer[stride * 2] + bayer[stride * 2 + 2];
+				t1 = bayer[1] + bayer[stride] + bayer[stride + 2] + bayer[stride * 2 + 1];
+				*ydst++ = (8453 * bayer[stride + 1] + 4148 * t1 +
 						806 * t0 + 524288) >> 15;
 
-				t0 = bayer[2] + bayer[width * 2 + 2];
-				t1 = bayer[width + 1] + bayer[width + 3];
-				*ydst++ = (4226 * t1 + 16594 * bayer[width + 2] +
+				t0 = bayer[2] + bayer[stride * 2 + 2];
+				t1 = bayer[stride + 1] + bayer[stride + 3];
+				*ydst++ = (4226 * t1 + 16594 * bayer[stride + 2] +
 						1611 * t0 + 524288) >> 15;
 			}
 		} else {
 			for (; bayer <= bayer_end - 2; bayer += 2) {
-				t0 = bayer[0] + bayer[2] + bayer[width * 2] + bayer[width * 2 + 2];
-				t1 = bayer[1] + bayer[width] + bayer[width + 2] + bayer[width * 2 + 1];
+				t0 = bayer[0] + bayer[2] + bayer[stride * 2] + bayer[stride * 2 + 2];
+				t1 = bayer[1] + bayer[stride] + bayer[stride + 2] + bayer[stride * 2 + 1];
 				*ydst++ = (2113 * t0 + 4148 * t1 +
-						3223 * bayer[width + 1] + 524288) >> 15;
+						3223 * bayer[stride + 1] + 524288) >> 15;
 
-				t0 = bayer[2] + bayer[width * 2 + 2];
-				t1 = bayer[width + 1] + bayer[width + 3];
-				*ydst++ = (4226 * t0 + 16594 * bayer[width + 2] +
+				t0 = bayer[2] + bayer[stride * 2 + 2];
+				t1 = bayer[stride + 1] + bayer[stride + 3];
+				*ydst++ = (4226 * t0 + 16594 * bayer[stride + 2] +
 						1611 * t1 + 524288) >> 15;
 			}
 		}
 
 		if (bayer < bayer_end) {
 			/* Write second to last pixel */
-			t0 = bayer[0] + bayer[2] + bayer[width * 2] + bayer[width * 2 + 2];
-			t1 = bayer[1] + bayer[width] + bayer[width + 2] + bayer[width * 2 + 1];
+			t0 = bayer[0] + bayer[2] + bayer[stride * 2] + bayer[stride * 2 + 2];
+			t1 = bayer[1] + bayer[stride] + bayer[stride + 2] + bayer[stride * 2 + 1];
 			if (blue_line)
-				*ydst++ = (8453 * bayer[width + 1] + 4148 * t1 +
+				*ydst++ = (8453 * bayer[stride + 1] + 4148 * t1 +
 						806 * t0 + 524288) >> 15;
 			else
 				*ydst++ = (2113 * t0 + 4148 * t1 +
-						3223 * bayer[width + 1] + 524288) >> 15;
+						3223 * bayer[stride + 1] + 524288) >> 15;
 
 			/* write last pixel */
-			t0 = bayer[2] + bayer[width * 2 + 2];
+			t0 = bayer[2] + bayer[stride * 2 + 2];
 			if (blue_line) {
-				*ydst++ = (8453 * bayer[width + 1] + 16594 * bayer[width + 2] +
+				*ydst++ = (8453 * bayer[stride + 1] + 16594 * bayer[stride + 2] +
 						1661 * t0 + 524288) >> 15;
 			} else {
-				*ydst++ = (4226 * t0 + 16594 * bayer[width + 2] +
-						3223 * bayer[width + 1] + 524288) >> 15;
+				*ydst++ = (4226 * t0 + 16594 * bayer[stride + 2] +
+						3223 * bayer[stride + 1] + 524288) >> 15;
 			}
 			bayer++;
 		} else {
 			/* write last pixel */
-			t0 = bayer[0] + bayer[width * 2];
-			t1 = bayer[1] + bayer[width * 2 + 1] + bayer[width];
+			t0 = bayer[0] + bayer[stride * 2];
+			t1 = bayer[1] + bayer[stride * 2 + 1] + bayer[stride];
 			if (blue_line)
-				*ydst++ = (8453 * bayer[width + 1] + 5516 * t1 +
+				*ydst++ = (8453 * bayer[stride + 1] + 5516 * t1 +
 						1661 * t0 + 524288) >> 15;
 			else
 				*ydst++ = (4226 * t0 + 5516 * t1 +
-						3223 * bayer[width + 1] + 524288) >> 15;
+						3223 * bayer[stride + 1] + 524288) >> 15;
 		}
 
-		/* skip 2 border pixels */
-		bayer += 2;
+		/* skip 2 border pixels and padding */
+		bayer += (stride - width) + 2;
 
 		blue_line = !blue_line;
 		start_with_green = !start_with_green;
 	}
 
 	/* render the last line */
-	v4lconvert_border_bayer_line_to_y(bayer + width, bayer, ydst, width,
+	v4lconvert_border_bayer_line_to_y(bayer + stride, bayer, ydst, width,
 			!start_with_green, !blue_line);
 }
diff --git a/lib/libv4lconvert/libv4lconvert-priv.h b/lib/libv4lconvert/libv4lconvert-priv.h
index 705a26d..5b76767 100644
--- a/lib/libv4lconvert/libv4lconvert-priv.h
+++ b/lib/libv4lconvert/libv4lconvert-priv.h
@@ -230,13 +230,13 @@ void v4lconvert_decode_stv0680(const unsigned char *src, unsigned char *dst,
 		int width, int height);
 
 void v4lconvert_bayer_to_rgb24(const unsigned char *bayer,
-		unsigned char *rgb, int width, int height, unsigned int pixfmt);
+		unsigned char *rgb, int width, int height, const unsigned int stride, unsigned int pixfmt);
 
 void v4lconvert_bayer_to_bgr24(const unsigned char *bayer,
-		unsigned char *rgb, int width, int height, unsigned int pixfmt);
+		unsigned char *rgb, int width, int height, const unsigned int stride, unsigned int pixfmt);
 
 void v4lconvert_bayer_to_yuv420(const unsigned char *bayer, unsigned char *yuv,
-		int width, int height, unsigned int src_pixfmt, int yvu);
+		int width, int height, const unsigned int stride, unsigned int src_pixfmt, int yvu);
 
 void v4lconvert_hm12_to_rgb24(const unsigned char *src,
 		unsigned char *dst, int width, int height);
diff --git a/lib/libv4lconvert/libv4lconvert.c b/lib/libv4lconvert/libv4lconvert.c
index 246e2c9..f44f9ff 100644
--- a/lib/libv4lconvert/libv4lconvert.c
+++ b/lib/libv4lconvert/libv4lconvert.c
@@ -629,6 +629,7 @@ static int v4lconvert_convert_pixfmt(struct v4lconvert_data *data,
 	unsigned int src_pix_fmt = fmt->fmt.pix.pixelformat;
 	unsigned int width  = fmt->fmt.pix.width;
 	unsigned int height = fmt->fmt.pix.height;
+	unsigned int bytesperline = fmt->fmt.pix.bytesperline;
 
 	switch (src_pix_fmt) {
 	/* JPG and variants */
@@ -858,16 +859,16 @@ static int v4lconvert_convert_pixfmt(struct v4lconvert_data *data,
 	case V4L2_PIX_FMT_SRGGB8:
 		switch (dest_pix_fmt) {
 		case V4L2_PIX_FMT_RGB24:
-			v4lconvert_bayer_to_rgb24(src, dest, width, height, src_pix_fmt);
+			v4lconvert_bayer_to_rgb24(src, dest, width, height, bytesperline, src_pix_fmt);
 			break;
 		case V4L2_PIX_FMT_BGR24:
-			v4lconvert_bayer_to_bgr24(src, dest, width, height, src_pix_fmt);
+			v4lconvert_bayer_to_bgr24(src, dest, width, height, bytesperline, src_pix_fmt);
 			break;
 		case V4L2_PIX_FMT_YUV420:
-			v4lconvert_bayer_to_yuv420(src, dest, width, height, src_pix_fmt, 0);
+			v4lconvert_bayer_to_yuv420(src, dest, width, height, bytesperline, src_pix_fmt, 0);
 			break;
 		case V4L2_PIX_FMT_YVU420:
-			v4lconvert_bayer_to_yuv420(src, dest, width, height, src_pix_fmt, 1);
+			v4lconvert_bayer_to_yuv420(src, dest, width, height, bytesperline, src_pix_fmt, 1);
 			break;
 		}
 		if (src_size < (width * height)) {
-- 
1.7.9.3

